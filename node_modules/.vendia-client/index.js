var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/.vendia-client/index.ts
var index_exports = {};
__export(index_exports, {
  createVendiaClient: () => createVendiaClient
});
module.exports = __toCommonJS(index_exports);
var import_debug = __toESM(require("debug"));

// node_modules/.vendia-client/create-core-client.ts
var import_graphql_request = require("graphql-request");
var createCoreClient = (options, {
  _logger,
  _onAuthStateChange
}) => {
  const { apiKey, getCredentials, onError } = options;
  if (onError && typeof onError !== "function") {
    throw new Error("onError must be a function");
  }
  const _errorHandler = onError;
  _logger("Initializing @vendia/client...");
  _logger(`'apiKey' was ${apiKey ? "" : "NOT "}provided.`);
  const _createGraphQLClient = () => {
    const opts = {
      headers: {
        "Content-Type": "application/json"
      }
    };
    if (options.apiKey) {
      opts.headers["x-api-key"] = options.apiKey;
      opts.headers["Authorization"] = options.apiKey;
    }
    if (options.fetch) {
      opts.fetch = options.fetch;
    }
    return new import_graphql_request.GraphQLClient(options.apiUrl, opts);
  };
  const _requestWrapper = async (action, operationName) => {
    try {
      const startTime = Date.now();
      const requestHeaders = {};
      if (typeof getCredentials === "function") {
        const credentials = await getCredentials();
        if (credentials == null ? void 0 : credentials.token) {
          requestHeaders["Authorization"] = `Bearer ${credentials.token}`;
        }
        if (credentials.apiKey) {
          requestHeaders["x-api-key"] = credentials.apiKey;
          requestHeaders["Authorization"] = credentials.apiKey;
        }
        _logger(`${operationName} getCredentials duration (ms)`, Date.now() - startTime);
      }
      const result = await action(requestHeaders);
      _logger(`${operationName} request duration (ms)`, Date.now() - startTime);
      return result;
    } catch (error) {
      if (_errorHandler) {
        _logger(`Passing error to user-provided error handler`);
        _errorHandler(error);
      }
      return Promise.reject(error);
    }
  };
  const _gqlClient = _createGraphQLClient();
  const request = (document, variables, requestHeaders) => {
    return _requestWrapper((additionalHeaders) => {
      const mergedHeaders = __spreadValues(__spreadValues({}, requestHeaders), additionalHeaders);
      return _gqlClient.request(document, variables, mergedHeaders);
    }, "request");
  };
  return {
    _gqlClient,
    _requestWrapper,
    request
  };
};

// node_modules/.vendia-client/create-subscription-client.ts
var import_graphql_ws = require("graphql-ws");
var import_uuid = require("@lukeed/uuid");
var import_isomorphic_ws = __toESM(require("isomorphic-ws"));
var import_graphql = require("graphql");
var createSubscriptionClient = function(options, {
  _logger,
  _onAuthStateChange
}) {
  const { apiKey, getCredentials, onError } = options;
  let subscriptionClient;
  const _createSubscriptionClient = () => {
    var _a;
    _logger("Creating subscription client...");
    let websocketUrl = (_a = options.websocketUrl) != null ? _a : "";
    if (websocketUrl.endsWith("/")) {
      websocketUrl = websocketUrl.slice(0, -1);
    }
    const subClientOptions = {
      url: websocketUrl,
      webSocketImpl: import_isomorphic_ws.default
    };
    if (typeof getCredentials === "function") {
      subClientOptions.connectionParams = async () => {
        const credentials = await getCredentials();
        return __spreadValues({}, credentials);
      };
    } else if (apiKey) {
      subClientOptions.connectionParams = { apiKey };
    }
    const subClient = (0, import_graphql_ws.createClient)(subClientOptions);
    subClient.on("connecting", () => _logger("subscriptionClient connecting..."));
    subClient.on("connected", () => _logger("subscriptionClient connected!"));
    subClient.on("closed", () => _logger("subscriptionClient ---disconnected!!!---"));
    return subClient;
  };
  const connectedUnsubscribeMap = /* @__PURE__ */ new Map();
  const _subscribe = ({ query, variables }, handler) => {
    const queryAsString = (0, import_graphql.print)(query);
    _logger(`subscriptionClient creating subscription ${queryAsString}`);
    if (options.websocketUrl === void 0) {
      throw new Error("Please initialize @vendia/client with the websocketUrl option in order to use subscriptions.");
    }
    if (subscriptionClient === void 0) {
      subscriptionClient = _createSubscriptionClient();
    }
    const unsubscribe = subscriptionClient.subscribe({ query: queryAsString, variables }, {
      next: handler,
      error: (error) => {
        _logger("subscriptionClient error:", JSON.stringify(error, null, 2));
        if (typeof onError === "function") {
          onError(error);
        }
      },
      complete: () => {
        _logger("subscriptionClient complete fired");
      }
    });
    const observableId = (0, import_uuid.v4)();
    connectedUnsubscribeMap.set(observableId, unsubscribe);
    return createUnsubscribeWrapperFunc(observableId);
  };
  const createUnsubscribeWrapperFunc = (observableId) => {
    return () => {
      const unsubFunc = connectedUnsubscribeMap.get(observableId);
      if (unsubFunc) {
        _logger("Unsubscribing.");
        unsubFunc();
        return;
      }
      _logger("Tried to unsubscribe, but subscription does not exist. This probably means unsubscribe has already been called for this subscription.");
    };
  };
  return {
    _subscribe
  };
};

// node_modules/.vendia-client/generated.ts
var import_graphql_tag = __toESM(require("graphql-tag"));
var Vendia_Block_Result_FragmentFragmentDoc = import_graphql_tag.default`
    fragment Vendia_Block_Result_Fragment on Vendia_Block_Result_ {
  error
  result {
    _id
    blockSchemaVersion
    blockId
    redactedBlockHash
    previousBlockId
    previousRedactedBlockHash
    blockHash
    previousBlockHash
    status
    commitTime
    _owner
    transactions {
      _id
      hash
      redactedHash
      signature
      version
      submissionTime
      mutations
      _owner
    }
  }
}
    `;
var Vendia_File_Result_FragmentFragmentDoc = import_graphql_tag.default`
    fragment Vendia_File_Result_Fragment on Vendia_File_Result_ {
  error
  result {
    _id
    sourceBucket
    sourceKey
    sourceRegion
    sourceVersion
    destinationKey
    copyStrategy
    read
    write
    etag
    createdTime
    updatedTime
    temporaryUrl
    fileVersion
    _owner
  }
}
    `;
var Vendia_Folder_Result_FragmentFragmentDoc = import_graphql_tag.default`
    fragment Vendia_Folder_Result_Fragment on Vendia_Folder_Result_ {
  error
  result {
    _id
    name
    parent
    read
    write
    copyStrategy
    createdTime
    updatedTime
    _owner
  }
}
    `;
var _blocks__getDocument = import_graphql_tag.default`
    query _blocks__get($id: ID!) {
  getVendia_Block(id: $id) {
    _id
    blockSchemaVersion
    blockId
    redactedBlockHash
    previousBlockId
    previousRedactedBlockHash
    blockHash
    previousBlockHash
    status
    commitTime
    _owner
    transactions {
      _id
      hash
      redactedHash
      signature
      version
      submissionTime
      mutations
      _owner
    }
  }
}
    `;
var _blocks__listDocument = import_graphql_tag.default`
    query _blocks__list($filter: Vendia_Block_FilterInput_, $limit: Int, $nextToken: String) {
  listVendia_BlockItems(filter: $filter, limit: $limit, nextToken: $nextToken) {
    nextToken
    Vendia_BlockItems {
      _id
      blockSchemaVersion
      blockId
      redactedBlockHash
      previousBlockId
      previousRedactedBlockHash
      blockHash
      previousBlockHash
      status
      commitTime
      _owner
      transactions {
        _id
        hash
        redactedHash
        signature
        version
        submissionTime
        mutations
        _owner
      }
    }
  }
}
    `;
var _blocks__onAddDocument = import_graphql_tag.default`
    subscription _blocks__onAdd {
  onAddVendia_Block {
    ...Vendia_Block_Result_Fragment
  }
}
    ${Vendia_Block_Result_FragmentFragmentDoc}`;
var _blocks__onRemoveDocument = import_graphql_tag.default`
    subscription _blocks__onRemove {
  onRemoveVendia_Block {
    ...Vendia_Block_Result_Fragment
  }
}
    ${Vendia_Block_Result_FragmentFragmentDoc}`;
var _blocks__onUpdateDocument = import_graphql_tag.default`
    subscription _blocks__onUpdate {
  onUpdateVendia_Block {
    ...Vendia_Block_Result_Fragment
  }
}
    ${Vendia_Block_Result_FragmentFragmentDoc}`;
var _contracts__getDocument = import_graphql_tag.default`
    query _contracts__get($id: ID!, $version: Int) {
  getVendia_Contract(id: $id, version: $version) {
    ... on Vendia_Contract {
      description
      revisionId
      _acl {
        path
        operations
        principal {
          nodes
        }
      }
      _id
      _owner
      inputQuery
      name
      outputMutation
      resource {
        uri
        csp
        metadata {
          name
          value
        }
      }
    }
    ... on Vendia_Contract_Partial_ {
      __alias__name: name
      description
      _acl {
        path
        operations
        principal {
          nodes
        }
      }
      _id
      _owner
      inputQuery
      __alias__outputMutation: outputMutation
      __alias__resource: resource {
        uri
        csp
        metadata {
          name
          value
        }
      }
      revisionId
    }
  }
}
    `;
var _contracts__listDocument = import_graphql_tag.default`
    query _contracts__list($limit: Int, $nextToken: String, $filter: Vendia_Contract_FilterInput_) {
  listVendia_ContractItems(filter: $filter, limit: $limit, nextToken: $nextToken) {
    Vendia_ContractItems {
      ... on Vendia_Contract {
        description
        revisionId
        _acl {
          path
          operations
          principal {
            nodes
          }
        }
        _id
        _owner
        inputQuery
        name
        outputMutation
        resource {
          uri
          csp
          metadata {
            name
            value
          }
        }
      }
      ... on Vendia_Contract_Partial_ {
        __alias__name: name
        description
        _acl {
          path
          operations
          principal {
            nodes
          }
        }
        _id
        _owner
        inputQuery
        __alias__outputMutation: outputMutation
        __alias__resource: resource {
          uri
          csp
          metadata {
            name
            value
          }
        }
        revisionId
      }
    }
    nextToken
  }
}
    `;
var _contracts__listVersionsDocument = import_graphql_tag.default`
    query _contracts__listVersions($id: ID!, $limit: Int, $nextToken: String) {
  listVendia_ContractVersions(id: $id, limit: $limit, nextToken: $nextToken) {
    nextToken
    versions {
      ordinal
      block
      transactions {
        _id
        _owner
        submissionTime
      }
    }
  }
}
    `;
var _contracts__addDocument = import_graphql_tag.default`
    mutation _contracts__add($aclInput: Vendia_Acls_Input_, $input: Vendia_Contract_Input_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {
  addVendia_Contract(aclInput: $aclInput, input: $input, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      ... on Vendia_Contract {
        description
        revisionId
        _acl {
          operations
          path
          principal {
            nodes
          }
        }
        _id
        _owner
        inputQuery
        name
        outputMutation
        resource {
          uri
          csp
          metadata {
            name
            value
          }
        }
      }
      ... on Vendia_Contract_Partial_ {
        __alias__name: name
        description
        _acl {
          path
          operations
          principal {
            nodes
          }
        }
        _id
        _owner
        inputQuery
        __alias__outputMutation: outputMutation
        __alias__resource: resource {
          uri
          csp
          metadata {
            name
            value
          }
        }
        revisionId
      }
    }
  }
}
    `;
var _contracts__updateDocument = import_graphql_tag.default`
    mutation _contracts__update($id: ID!, $aclInput: Vendia_Acls_Input_, $condition: Vendia_Contract_ConditionInput_, $input: Vendia_Contract_UpdateInput_ = {}, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {
  updateVendia_Contract(
    input: $input
    aclInput: $aclInput
    condition: $condition
    id: $id
    syncMode: $syncMode
  ) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      ... on Vendia_Contract {
        description
        revisionId
        _acl {
          operations
          path
          principal {
            nodes
          }
        }
        _id
        _owner
        inputQuery
        name
        outputMutation
        resource {
          uri
          csp
          metadata {
            name
            value
          }
        }
      }
      ... on Vendia_Contract_Partial_ {
        __alias__name: name
        description
        _acl {
          path
          operations
          principal {
            nodes
          }
        }
        _id
        _owner
        inputQuery
        __alias__outputMutation: outputMutation
        __alias__resource: resource {
          uri
          csp
          metadata {
            name
            value
          }
        }
        revisionId
      }
    }
  }
}
    `;
var _contracts__invokeDocument = import_graphql_tag.default`
    mutation _contracts__invoke($input: Vendia_Contract_InvokeInput_, $revisionId: String, $id: ID!) {
  invokeVendia_Contract_async(id: $id, input: $input, revisionId: $revisionId) {
    error
    result {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
  }
}
    `;
var _contracts__removeDocument = import_graphql_tag.default`
    mutation _contracts__remove($id: ID!, $condition: Vendia_Contract_ConditionInput_, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {
  removeVendia_Contract(id: $id, condition: $condition, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
  }
}
    `;
var _deployments__getDocument = import_graphql_tag.default`
    query _deployments__get($id: ID!) {
  getVendia_DeploymentInfo(id: $id) {
    _id
    deploymentTime
    consensusDefinitionHash
    versionTag
    _owner
  }
}
    `;
var _deployments__listDocument = import_graphql_tag.default`
    query _deployments__list($filter: Vendia_DeploymentInfo_FilterInput_, $nextToken: String, $limit: Int) {
  listVendia_DeploymentInfoItems(
    filter: $filter
    limit: $limit
    nextToken: $nextToken
  ) {
    Vendia_DeploymentInfoItems {
      _id
      deploymentTime
      consensusDefinitionHash
      versionTag
      _owner
    }
    nextToken
  }
}
    `;
var _files__getDocument = import_graphql_tag.default`
    query _files__get($id: ID!, $version: Int) {
  getVendia_File(id: $id, version: $version) {
    _id
    sourceBucket
    sourceKey
    sourceRegion
    sourceVersion
    destinationKey
    copyStrategy
    read
    write
    etag
    createdTime
    updatedTime
    temporaryUrl
    fileVersion
    _owner
  }
}
    `;
var _files__listDocument = import_graphql_tag.default`
    query _files__list($filter: Vendia_File_FilterInput_, $limit: Int, $nextToken: String) {
  listVendia_FileItems(filter: $filter, limit: $limit, nextToken: $nextToken) {
    nextToken
    Vendia_FileItems {
      _id
      sourceBucket
      sourceKey
      sourceRegion
      sourceVersion
      destinationKey
      copyStrategy
      read
      write
      etag
      createdTime
      updatedTime
      temporaryUrl
      fileVersion
      _owner
    }
  }
}
    `;
var _files__listVersionsDocument = import_graphql_tag.default`
    query _files__listVersions($id: ID!, $limit: Int, $nextToken: String) {
  listVendia_FileVersions(id: $id, limit: $limit, nextToken: $nextToken) {
    nextToken
    versions {
      ordinal
      block
      transactions {
        _id
        _owner
        submissionTime
      }
    }
  }
}
    `;
var _files__addDocument = import_graphql_tag.default`
    mutation _files__add($input: Vendia_File_Input_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {
  addVendia_File(input: $input, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      _id
      sourceBucket
      sourceKey
      sourceRegion
      sourceVersion
      destinationKey
      copyStrategy
      read
      write
      etag
      createdTime
      updatedTime
      temporaryUrl
      fileVersion
      _owner
    }
  }
}
    `;
var _files__updateDocument = import_graphql_tag.default`
    mutation _files__update($id: ID!, $condition: Vendia_File_ConditionInput_, $input: Vendia_File_UpdateInput_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {
  updateVendia_File(
    id: $id
    input: $input
    condition: $condition
    syncMode: $syncMode
  ) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      _id
      sourceBucket
      sourceKey
      sourceRegion
      sourceVersion
      destinationKey
      copyStrategy
      read
      write
      etag
      createdTime
      updatedTime
      temporaryUrl
      fileVersion
      _owner
    }
  }
}
    `;
var _files__removeDocument = import_graphql_tag.default`
    mutation _files__remove($condition: Vendia_File_ConditionInput_, $id: ID!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {
  removeVendia_File(id: $id, condition: $condition, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
  }
}
    `;
var _files__onAddDocument = import_graphql_tag.default`
    subscription _files__onAdd {
  onAddVendia_File {
    ...Vendia_File_Result_Fragment
  }
}
    ${Vendia_File_Result_FragmentFragmentDoc}`;
var _files__onRemoveDocument = import_graphql_tag.default`
    subscription _files__onRemove {
  onRemoveVendia_File {
    ...Vendia_File_Result_Fragment
  }
}
    ${Vendia_File_Result_FragmentFragmentDoc}`;
var _files__onUpdateDocument = import_graphql_tag.default`
    subscription _files__onUpdate {
  onUpdateVendia_File {
    ...Vendia_File_Result_Fragment
  }
}
    ${Vendia_File_Result_FragmentFragmentDoc}`;
var _folders__getDocument = import_graphql_tag.default`
    query _folders__get($id: ID!, $version: Int) {
  getVendia_Folder(id: $id, version: $version) {
    _id
    name
    parent
    read
    write
    copyStrategy
    createdTime
    updatedTime
    _owner
  }
}
    `;
var _folders__listDocument = import_graphql_tag.default`
    query _folders__list($filter: Vendia_Folder_FilterInput_, $limit: Int, $nextToken: String) {
  listVendia_FolderItems(filter: $filter, limit: $limit, nextToken: $nextToken) {
    Vendia_FolderItems {
      _id
      name
      parent
      read
      write
      copyStrategy
      createdTime
      updatedTime
      _owner
    }
    nextToken
  }
}
    `;
var _folders__listVersionsDocument = import_graphql_tag.default`
    query _folders__listVersions($id: ID!, $limit: Int, $nextToken: String) {
  listVendia_FolderVersions(id: $id, limit: $limit, nextToken: $nextToken) {
    nextToken
    versions {
      ordinal
      block
      transactions {
        _id
        _owner
        submissionTime
      }
    }
  }
}
    `;
var _folders__addDocument = import_graphql_tag.default`
    mutation _folders__add($input: Vendia_Folder_Input_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {
  addVendia_Folder(input: $input, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      _id
      name
      parent
      read
      write
      copyStrategy
      createdTime
      updatedTime
      _owner
    }
  }
}
    `;
var _folders__removeDocument = import_graphql_tag.default`
    mutation _folders__remove($id: ID!, $condition: Vendia_Folder_ConditionInput_, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {
  removeVendia_Folder(id: $id, condition: $condition, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
  }
}
    `;
var _folders__onAddDocument = import_graphql_tag.default`
    subscription _folders__onAdd {
  onAddVendia_Folder {
    ...Vendia_Folder_Result_Fragment
  }
}
    ${Vendia_Folder_Result_FragmentFragmentDoc}`;
var _folders__onRemoveDocument = import_graphql_tag.default`
    subscription _folders__onRemove {
  onRemoveVendia_Folder {
    ...Vendia_Folder_Result_Fragment
  }
}
    ${Vendia_Folder_Result_FragmentFragmentDoc}`;
var _folders__onUpdateDocument = import_graphql_tag.default`
    subscription _folders__onUpdate {
  onUpdateVendia_Folder {
    ...Vendia_Folder_Result_Fragment
  }
}
    ${Vendia_Folder_Result_FragmentFragmentDoc}`;
var _settings__getDocument = import_graphql_tag.default`
    query _settings__get($version: Int) {
  getVendia_Settings(version: $version) {
    blockReportWebhooks
    blockReportEmails
    deadLetterWebhooks
    deadLetterEmails
    azure {
      defaultSubscriptionId
      defaultTenantId
    }
    resourceMapKeys
    resourceMapValues
    apiSettings {
      apiKeys {
        value
        usagePlan {
          quotaSettings {
            limit
            offset
            period
          }
          throttleSettings {
            burstLimit
            rateLimit
          }
        }
      }
      auth {
        authorizerType
        authorizerArn
        allowedAccounts
      }
    }
    _owner
    aws {
      blockReportSQSQueues
      blockReportLambdas
      blockReportFirehoses
      deadLetterSQSQueues
      deadLetterLambdas
      sqsIngressAccounts
      s3ReadAccounts
      lambdaIngressAccounts
      dataDogMonitoring {
        ddExternalId
        ddApiKey
        ddLogEndpoint
        ddSendLogs
      }
    }
  }
}
    `;
var _settings__listVersionsDocument = import_graphql_tag.default`
    query _settings__listVersions($limit: Int, $nextToken: String) {
  listVendia_SettingsVersions(limit: $limit, nextToken: $nextToken) {
    versions {
      ordinal
      block
      transactions {
        _id
        _owner
        submissionTime
      }
    }
    nextToken
  }
}
    `;
var _settings__updateDocument = import_graphql_tag.default`
    mutation _settings__update($condition: Vendia_Settings_ConditionInput_, $input: Vendia_Settings_UpdateInput_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {
  updateVendia_Settings(condition: $condition, input: $input, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      blockReportWebhooks
      blockReportEmails
      deadLetterWebhooks
      deadLetterEmails
      azure {
        blockReportFunctions {
          resourceGroupName
          functionAppName
          functionName
        }
        blockReportQueues {
          resourceGroupName
          storageAccountName
          queueName
        }
        deadLetterFunctions {
          resourceGroupName
          functionAppName
          functionName
        }
        deadLetterQueues {
          resourceGroupName
          storageAccountName
          queueName
        }
        defaultSubscriptionId
        defaultTenantId
      }
      resourceMapKeys
      resourceMapValues
      apiSettings {
        apiKeys {
          value
          usagePlan {
            quotaSettings {
              limit
              offset
              period
            }
            throttleSettings {
              burstLimit
              rateLimit
            }
          }
        }
      }
      _owner
      aws {
        blockReportSQSQueues
        blockReportLambdas
        blockReportFirehoses
        deadLetterSQSQueues
        deadLetterLambdas
        sqsIngressAccounts
        s3ReadAccounts
        lambdaIngressAccounts
        dataDogMonitoring {
          ddExternalId
          ddApiKey
          ddLogEndpoint
          ddSendLogs
        }
      }
    }
  }
}
    `;
var _uniInfo__getDocument = import_graphql_tag.default`
    query _uniInfo__get {
  getVendia_UniInfo {
    name
    sku
    schema
    schemaNamespace
    status
    createdTime
    updatedTime
    localNodeName
    _owner
    nodes {
      name
      userId
      userEmail
      description
      status
      csp
      region
      bucketName
      temporaryCredentials {
        uploadFile {
          accessKeyId
          expiration
          secretAccessKey
          sessionToken
        }
      }
      tier {
        share
      }
      vendiaAccount {
        csp
        accountId
        userId
        org
      }
    }
  }
}
    `;
var Employee__getDocument = import_graphql_tag.default`
    query Employee__get($id: ID!, $version: Int) {
  get_Employee(id: $id, version: $version) {
    ... on Self_Employee {
      _id
      _owner
      emp_id
      firstName
      lastName
      age
      genderIdentity
      height
      weight
      bodyTemperature
      pulseRate
      bloodPressureSystolic
      bloodPressureDiastolic
      respirationRate
      exerciseHours
      vacationBalance
      workHours
    }
    ... on Self_Employee_Partial_ {
      _id
      _owner
      __alias__emp_id: emp_id
      __alias__firstName: firstName
      __alias__lastName: lastName
      __alias__age: age
      __alias__genderIdentity: genderIdentity
      __alias__height: height
      __alias__weight: weight
      __alias__bodyTemperature: bodyTemperature
      __alias__pulseRate: pulseRate
      __alias__bloodPressureSystolic: bloodPressureSystolic
      __alias__bloodPressureDiastolic: bloodPressureDiastolic
      __alias__respirationRate: respirationRate
      __alias__exerciseHours: exerciseHours
      __alias__vacationBalance: vacationBalance
      __alias__workHours: workHours
    }
  }
}
    `;
var Employee__listDocument = import_graphql_tag.default`
    query Employee__list($nextToken: String, $limit: Int, $filter: Self_Employee_FilterInput_) {
  list_EmployeeItems(nextToken: $nextToken, limit: $limit, filter: $filter) {
    _EmployeeItems {
      ... on Self_Employee {
        _id
        _owner
        emp_id
        firstName
        lastName
        age
        genderIdentity
        height
        weight
        bodyTemperature
        pulseRate
        bloodPressureSystolic
        bloodPressureDiastolic
        respirationRate
        exerciseHours
        vacationBalance
        workHours
      }
      ... on Self_Employee_Partial_ {
        _id
        _owner
        __alias__emp_id: emp_id
        __alias__firstName: firstName
        __alias__lastName: lastName
        __alias__age: age
        __alias__genderIdentity: genderIdentity
        __alias__height: height
        __alias__weight: weight
        __alias__bodyTemperature: bodyTemperature
        __alias__pulseRate: pulseRate
        __alias__bloodPressureSystolic: bloodPressureSystolic
        __alias__bloodPressureDiastolic: bloodPressureDiastolic
        __alias__respirationRate: respirationRate
        __alias__exerciseHours: exerciseHours
        __alias__vacationBalance: vacationBalance
        __alias__workHours: workHours
      }
    }
    nextToken
  }
}
    `;
var Employee__addDocument = import_graphql_tag.default`
    mutation Employee__add($input: Self_Employee_Input_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED, $aclInput: Vendia_Acls_Input_) {
  add_Employee(input: $input, syncMode: $syncMode, aclInput: $aclInput) {
    transaction {
      _id
      _owner
      transactionId
      submissionTime
      version
    }
    result {
      ... on Self_Employee {
        _id
        _owner
        emp_id
        firstName
        lastName
        age
        genderIdentity
        height
        weight
        bodyTemperature
        pulseRate
        bloodPressureSystolic
        bloodPressureDiastolic
        respirationRate
        exerciseHours
        vacationBalance
        workHours
      }
      ... on Self_Employee_Partial_ {
        _id
        _owner
        __alias__emp_id: emp_id
        __alias__firstName: firstName
        __alias__lastName: lastName
        __alias__age: age
        __alias__genderIdentity: genderIdentity
        __alias__height: height
        __alias__weight: weight
        __alias__bodyTemperature: bodyTemperature
        __alias__pulseRate: pulseRate
        __alias__bloodPressureSystolic: bloodPressureSystolic
        __alias__bloodPressureDiastolic: bloodPressureDiastolic
        __alias__respirationRate: respirationRate
        __alias__exerciseHours: exerciseHours
        __alias__vacationBalance: vacationBalance
        __alias__workHours: workHours
      }
    }
  }
}
    `;
var Employee__updateDocument = import_graphql_tag.default`
    mutation Employee__update($id: ID!, $input: Self_Employee_UpdateInput_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED, $condition: Self_Employee_ConditionInput_, $aclInput: Vendia_Acls_Input_) {
  update_Employee(
    id: $id
    input: $input
    syncMode: $syncMode
    condition: $condition
    aclInput: $aclInput
  ) {
    transaction {
      _id
      _owner
      transactionId
      submissionTime
      version
    }
    result {
      ... on Self_Employee {
        _id
        _owner
        emp_id
        firstName
        lastName
        age
        genderIdentity
        height
        weight
        bodyTemperature
        pulseRate
        bloodPressureSystolic
        bloodPressureDiastolic
        respirationRate
        exerciseHours
        vacationBalance
        workHours
      }
      ... on Self_Employee_Partial_ {
        _id
        _owner
        __alias__emp_id: emp_id
        __alias__firstName: firstName
        __alias__lastName: lastName
        __alias__age: age
        __alias__genderIdentity: genderIdentity
        __alias__height: height
        __alias__weight: weight
        __alias__bodyTemperature: bodyTemperature
        __alias__pulseRate: pulseRate
        __alias__bloodPressureSystolic: bloodPressureSystolic
        __alias__bloodPressureDiastolic: bloodPressureDiastolic
        __alias__respirationRate: respirationRate
        __alias__exerciseHours: exerciseHours
        __alias__vacationBalance: vacationBalance
        __alias__workHours: workHours
      }
    }
  }
}
    `;
var Employee__removeDocument = import_graphql_tag.default`
    mutation Employee__remove($id: ID!, $syncMode: Vendia_SyncMode = NODE_LEDGERED, $condition: Self_Employee_ConditionInput_) {
  remove_Employee(id: $id, syncMode: $syncMode, condition: $condition) {
    transaction {
      _id
      _owner
      transactionId
      submissionTime
      version
    }
  }
}
    `;
var Employee__onAddDocument = import_graphql_tag.default`
    subscription Employee__onAdd {
  onAdd_Employee {
    error
    result {
      _id
      _owner
      emp_id
      firstName
      lastName
      age
      genderIdentity
      height
      weight
      bodyTemperature
      pulseRate
      bloodPressureSystolic
      bloodPressureDiastolic
      respirationRate
      exerciseHours
      vacationBalance
      workHours
    }
  }
}
    `;
var Employee__onRemoveDocument = import_graphql_tag.default`
    subscription Employee__onRemove {
  onRemove_Employee {
    error
    result {
      _id
      _owner
      emp_id
      firstName
      lastName
      age
      genderIdentity
      height
      weight
      bodyTemperature
      pulseRate
      bloodPressureSystolic
      bloodPressureDiastolic
      respirationRate
      exerciseHours
      vacationBalance
      workHours
    }
  }
}
    `;
var Employee__onUpdateDocument = import_graphql_tag.default`
    subscription Employee__onUpdate {
  onUpdate_Employee {
    error
    result {
      _id
      _owner
      emp_id
      firstName
      lastName
      age
      genderIdentity
      height
      weight
      bodyTemperature
      pulseRate
      bloodPressureSystolic
      bloodPressureDiastolic
      respirationRate
      exerciseHours
      vacationBalance
      workHours
    }
  }
}
    `;
var defaultWrapper = (action, _operationName) => action();
function getEntities({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
  return {
    employee: {
      get(id, options) {
        const variables = __spreadProps(__spreadValues({}, options), { id });
        return _requestWrapper((wrappedRequestHeaders) => {
          return _gqlClient.request(Employee__getDocument, variables, wrappedRequestHeaders).then((res) => res.get_Employee).then((res) => {
            return stripAliasPrefixesFromKeys(res);
          });
        }, "get_Employee");
      },
      list(options) {
        const variables = options;
        return _requestWrapper((wrappedRequestHeaders) => {
          return _gqlClient.request(Employee__listDocument, variables, wrappedRequestHeaders).then((res) => {
            var _a;
            const updatedRes = __spreadProps(__spreadValues({}, res.list_EmployeeItems), { items: (_a = res.list_EmployeeItems) == null ? void 0 : _a._EmployeeItems });
            delete updatedRes._EmployeeItems;
            return updatedRes;
          }).then((res) => {
            const items = stripAliasPrefixesFromKeys(res.items);
            return __spreadProps(__spreadValues({}, res), { items });
          });
        }, "list_EmployeeItems");
      },
      add(input, options) {
        const variables = __spreadProps(__spreadValues({}, options), { input });
        return _requestWrapper((wrappedRequestHeaders) => {
          return _gqlClient.request(Employee__addDocument, variables, wrappedRequestHeaders).then((res) => res.add_Employee).then((res) => {
            const result = stripAliasPrefixesFromKeys(res == null ? void 0 : res.result);
            return __spreadProps(__spreadValues({}, res), { result });
          });
        }, "add_Employee");
      },
      update(input, options) {
        const _a = input, { _id } = _a, rest = __objRest(_a, ["_id"]);
        const variables = __spreadProps(__spreadValues({}, options), { id: _id, input: rest });
        return _requestWrapper((wrappedRequestHeaders) => {
          return _gqlClient.request(Employee__updateDocument, variables, wrappedRequestHeaders).then((res) => res.update_Employee).then((res) => {
            const result = stripAliasPrefixesFromKeys(res == null ? void 0 : res.result);
            return __spreadProps(__spreadValues({}, res), { result });
          });
        }, "update_Employee");
      },
      remove(id, options) {
        const variables = __spreadProps(__spreadValues({}, options), { id });
        return _requestWrapper((wrappedRequestHeaders) => {
          return _gqlClient.request(Employee__removeDocument, variables, wrappedRequestHeaders).then((res) => res.remove_Employee);
        }, "remove_Employee");
      },
      onAdd(handler) {
        return _subscribe({ query: Employee__onAddDocument }, ({ data }) => {
          return handler(data.onAdd_Employee);
        });
      },
      onRemove(handler) {
        return _subscribe({ query: Employee__onRemoveDocument }, ({ data }) => {
          return handler(data.onRemove_Employee);
        });
      },
      onUpdate(handler) {
        return _subscribe({ query: Employee__onUpdateDocument }, ({ data }) => {
          return handler(data.onUpdate_Employee);
        });
      }
    }
  };
}
function getBlocks({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
  return {
    get(id, options) {
      const variables = __spreadProps(__spreadValues({}, options), { id });
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_blocks__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_Block);
      }, "getVendia_Block");
    },
    list(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_blocks__listDocument, variables, wrappedRequestHeaders).then((res) => {
          var _a;
          const updatedRes = __spreadProps(__spreadValues({}, res.listVendia_BlockItems), { items: (_a = res.listVendia_BlockItems) == null ? void 0 : _a.Vendia_BlockItems });
          delete updatedRes.Vendia_BlockItems;
          return updatedRes;
        });
      }, "listVendia_BlockItems");
    },
    onAdd(handler) {
      return _subscribe({ query: _blocks__onAddDocument }, ({ data }) => {
        return handler(data.onAddVendia_Block);
      });
    },
    onRemove(handler) {
      return _subscribe({ query: _blocks__onRemoveDocument }, ({ data }) => {
        return handler(data.onRemoveVendia_Block);
      });
    },
    onUpdate(handler) {
      return _subscribe({ query: _blocks__onUpdateDocument }, ({ data }) => {
        return handler(data.onUpdateVendia_Block);
      });
    }
  };
}
function getContracts({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
  return {
    get(id, options) {
      const variables = __spreadProps(__spreadValues({}, options), { id });
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_contracts__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_Contract);
      }, "getVendia_Contract");
    },
    list(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_contracts__listDocument, variables, wrappedRequestHeaders).then((res) => {
          var _a;
          const updatedRes = __spreadProps(__spreadValues({}, res.listVendia_ContractItems), { items: (_a = res.listVendia_ContractItems) == null ? void 0 : _a.Vendia_ContractItems });
          delete updatedRes.Vendia_ContractItems;
          return updatedRes;
        });
      }, "listVendia_ContractItems");
    },
    listVersions(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_contracts__listVersionsDocument, variables, wrappedRequestHeaders).then((res) => res.listVendia_ContractVersions);
      }, "listVendia_ContractVersions");
    },
    add(input, options) {
      const variables = __spreadProps(__spreadValues({}, options), { input });
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_contracts__addDocument, variables, wrappedRequestHeaders).then((res) => res.addVendia_Contract);
      }, "addVendia_Contract");
    },
    update(input, options) {
      const _a = input, { _id } = _a, rest = __objRest(_a, ["_id"]);
      const variables = __spreadProps(__spreadValues({}, options), { id: _id, input: rest });
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_contracts__updateDocument, variables, wrappedRequestHeaders).then((res) => res.updateVendia_Contract);
      }, "updateVendia_Contract");
    },
    invoke(id, options) {
      const variables = __spreadProps(__spreadValues({}, options), { id });
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_contracts__invokeDocument, variables, wrappedRequestHeaders).then((res) => res.invokeVendia_Contract_async);
      }, "invokeVendia_Contract_async");
    },
    remove(id, options) {
      const variables = __spreadProps(__spreadValues({}, options), { id });
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_contracts__removeDocument, variables, wrappedRequestHeaders).then((res) => res.removeVendia_Contract);
      }, "removeVendia_Contract");
    }
  };
}
function getFiles({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
  return {
    get(id, options) {
      const variables = __spreadProps(__spreadValues({}, options), { id });
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_files__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_File);
      }, "getVendia_File");
    },
    list(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_files__listDocument, variables, wrappedRequestHeaders).then((res) => {
          var _a;
          const updatedRes = __spreadProps(__spreadValues({}, res.listVendia_FileItems), { items: (_a = res.listVendia_FileItems) == null ? void 0 : _a.Vendia_FileItems });
          delete updatedRes.Vendia_FileItems;
          return updatedRes;
        });
      }, "listVendia_FileItems");
    },
    listVersions(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_files__listVersionsDocument, variables, wrappedRequestHeaders).then((res) => res.listVendia_FileVersions);
      }, "listVendia_FileVersions");
    },
    add(input, options) {
      const variables = __spreadProps(__spreadValues({}, options), { input });
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_files__addDocument, variables, wrappedRequestHeaders).then((res) => res.addVendia_File);
      }, "addVendia_File");
    },
    update(input, options) {
      const _a = input, { _id } = _a, rest = __objRest(_a, ["_id"]);
      const variables = __spreadProps(__spreadValues({}, options), { id: _id, input: rest });
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_files__updateDocument, variables, wrappedRequestHeaders).then((res) => res.updateVendia_File);
      }, "updateVendia_File");
    },
    remove(id, options) {
      const variables = __spreadProps(__spreadValues({}, options), { id });
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_files__removeDocument, variables, wrappedRequestHeaders).then((res) => res.removeVendia_File);
      }, "removeVendia_File");
    },
    onAdd(handler) {
      return _subscribe({ query: _files__onAddDocument }, ({ data }) => {
        return handler(data.onAddVendia_File);
      });
    },
    onRemove(handler) {
      return _subscribe({ query: _files__onRemoveDocument }, ({ data }) => {
        return handler(data.onRemoveVendia_File);
      });
    },
    onUpdate(handler) {
      return _subscribe({ query: _files__onUpdateDocument }, ({ data }) => {
        return handler(data.onUpdateVendia_File);
      });
    }
  };
}
function getFolders({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
  return {
    get(id, options) {
      const variables = __spreadProps(__spreadValues({}, options), { id });
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_folders__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_Folder);
      }, "getVendia_Folder");
    },
    list(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_folders__listDocument, variables, wrappedRequestHeaders).then((res) => {
          var _a;
          const updatedRes = __spreadProps(__spreadValues({}, res.listVendia_FolderItems), { items: (_a = res.listVendia_FolderItems) == null ? void 0 : _a.Vendia_FolderItems });
          delete updatedRes.Vendia_FolderItems;
          return updatedRes;
        });
      }, "listVendia_FolderItems");
    },
    listVersions(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_folders__listVersionsDocument, variables, wrappedRequestHeaders).then((res) => res.listVendia_FolderVersions);
      }, "listVendia_FolderVersions");
    },
    add(input, options) {
      const variables = __spreadProps(__spreadValues({}, options), { input });
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_folders__addDocument, variables, wrappedRequestHeaders).then((res) => res.addVendia_Folder);
      }, "addVendia_Folder");
    },
    remove(id, options) {
      const variables = __spreadProps(__spreadValues({}, options), { id });
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_folders__removeDocument, variables, wrappedRequestHeaders).then((res) => res.removeVendia_Folder);
      }, "removeVendia_Folder");
    },
    onAdd(handler) {
      return _subscribe({ query: _folders__onAddDocument }, ({ data }) => {
        return handler(data.onAddVendia_Folder);
      });
    },
    onRemove(handler) {
      return _subscribe({ query: _folders__onRemoveDocument }, ({ data }) => {
        return handler(data.onRemoveVendia_Folder);
      });
    },
    onUpdate(handler) {
      return _subscribe({ query: _folders__onUpdateDocument }, ({ data }) => {
        return handler(data.onUpdateVendia_Folder);
      });
    }
  };
}
function getDeployments({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
  return {
    get(id, options) {
      const variables = __spreadProps(__spreadValues({}, options), { id });
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_deployments__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_DeploymentInfo);
      }, "getVendia_DeploymentInfo");
    },
    list(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_deployments__listDocument, variables, wrappedRequestHeaders).then((res) => {
          var _a;
          const updatedRes = __spreadProps(__spreadValues({}, res.listVendia_DeploymentInfoItems), { items: (_a = res.listVendia_DeploymentInfoItems) == null ? void 0 : _a.Vendia_DeploymentInfoItems });
          delete updatedRes.Vendia_DeploymentInfoItems;
          return updatedRes;
        });
      }, "listVendia_DeploymentInfoItems");
    }
  };
}
function getSettings({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
  return {
    get(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_settings__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_Settings);
      }, "getVendia_Settings");
    },
    listVersions(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_settings__listVersionsDocument, variables, wrappedRequestHeaders).then((res) => res.listVendia_SettingsVersions);
      }, "listVendia_SettingsVersions");
    },
    update(input, options) {
      const variables = __spreadProps(__spreadValues({}, options), { input });
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_settings__updateDocument, variables, wrappedRequestHeaders).then((res) => res.updateVendia_Settings);
      }, "updateVendia_Settings");
    }
  };
}
function getUniInfo({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
  return {
    get() {
      const variables = {};
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_uniInfo__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_UniInfo);
      }, "getVendia_UniInfo");
    }
  };
}
var ALIAS_PREFIX = "__alias__";
function stripAliasPrefixesFromKeys(value) {
  if (typeof value === "boolean" || typeof value === "number" || typeof value === "string" || value == null) {
    return value;
  }
  if (Array.isArray(value)) {
    return value.map((item) => stripAliasPrefixesFromKeys(item));
  }
  const clean = {};
  Object.entries(value).forEach(([key, val]) => {
    if (key.startsWith(ALIAS_PREFIX)) {
      clean[key.replace(ALIAS_PREFIX, "")] = val;
    } else {
      clean[key] = val;
    }
  });
  return clean;
}

// node_modules/.vendia-client/index.ts
var createVendiaClient = (options) => {
  const _logger = (0, import_debug.default)("@vendia/client");
  if (options.debug) {
    _logger("Debug enabled via options");
    import_debug.default.enable("@vendia/client");
  }
  const { _subscribe } = createSubscriptionClient(options, { _logger });
  const { _gqlClient, _requestWrapper, request } = createCoreClient(options, { _logger });
  const getSdkOptions = { _gqlClient, _requestWrapper, _subscribe };
  const blocks = getBlocks(getSdkOptions);
  const contracts = getContracts(getSdkOptions);
  const deployments = getDeployments(getSdkOptions);
  const entities = getEntities(getSdkOptions);
  const uniInfo = getUniInfo(getSdkOptions);
  const settings = getSettings(getSdkOptions);
  const folders = getFolders(getSdkOptions);
  const files = getFiles(getSdkOptions);
  const storage = {
    files,
    folders
  };
  return {
    request,
    deployments,
    blocks,
    storage,
    contracts,
    uniInfo,
    settings,
    entities
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createVendiaClient
});
