var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import fs from 'fs';
import path from 'path';
import { buildSchema } from 'graphql';
import { compileTs } from './compileTypescript';
import { generateTypescript } from './generateTypescript';
export const generateClient = ({ dotVendiaDirPath, debugInfo = {}, debug = function () {
    /* No-op */
}, vendiaMonorepoOverrides, }) => __awaiter(void 0, void 0, void 0, function* () {
    // TODO - allow user to change path to schema.json in vendia.yml
    debug('dotVendiaDirPath from generateClient.ts', dotVendiaDirPath);
    debugInfo.dotVendiaDirPath = dotVendiaDirPath;
    const dotVendiaExists = fs.existsSync(dotVendiaDirPath);
    let graphQlSchema;
    let schemaJson;
    let schemaNamespace;
    if (!dotVendiaExists) {
        console.log(`Could not find .vendia directory — make sure you've run the client:pull command and you're running generate from the root of your project (the same directory as your package.json).`);
        console.log(`Falling back to a generic schema — the generated client will not contain "entities".`);
        schemaNamespace = 'Self';
        schemaJson = {
            $schema: 'http://json-schema.org/draft-07/schema#',
            title: 'Uni Schema',
            description: 'Empty Uni Schema',
            type: 'object',
            properties: {},
        };
        const graphQlString = fs.readFileSync(path.join(__dirname, 'generic-schema.graphql'), 'utf8');
        graphQlSchema = buildSchema(graphQlString);
    }
    else {
        debug('generateClient: dotVendiaDirPath found at', dotVendiaDirPath);
        let schemaJsonString;
        try {
            schemaJsonString = fs.readFileSync(path.join(dotVendiaDirPath, 'schema.json'), 'utf8');
        }
        catch (e) {
            throw new Error(`Could not find schema.json at ${path.join(dotVendiaDirPath, 'schema.json')}.`);
        }
        try {
            schemaJson = JSON.parse(schemaJsonString);
        }
        catch (e) {
            throw new Error(`Could not parse schema.json at ${path.join(dotVendiaDirPath, 'schema.json')}.`);
        }
        if (!(schemaJson === null || schemaJson === void 0 ? void 0 : schemaJson.properties)) {
            throw new Error('schemaJson must be an object with a "properties" field.');
        }
        let configString;
        try {
            configString = fs.readFileSync(path.join(dotVendiaDirPath, 'config.json'), 'utf8');
        }
        catch (e) {
            throw new Error(`Could not find config.json at ${path.join(dotVendiaDirPath, 'config.json')}.`);
        }
        let config;
        try {
            config = JSON.parse(configString);
            schemaNamespace = config.schemaNamespace;
        }
        catch (e) {
            throw new Error(`Could not parse config.json at ${path.join(dotVendiaDirPath, 'config.json')}.`);
        }
        if (typeof schemaNamespace !== 'string') {
            throw new TypeError('schemaNamespace must be a string.');
        }
        let graphQLString;
        try {
            graphQLString = fs.readFileSync(path.join(dotVendiaDirPath, 'schema.graphql'), 'utf8');
        }
        catch (e) {
            throw new Error(`Could not find schema.graphql at ${path.join(dotVendiaDirPath, 'schema.graphql')}.`);
        }
        graphQlSchema = buildSchema(graphQLString);
    }
    let dotVendiaClientPath;
    let installedClientPath;
    if (vendiaMonorepoOverrides) {
        dotVendiaClientPath = vendiaMonorepoOverrides.dotVendiaClientPath;
        if (!fs.existsSync(dotVendiaClientPath)) {
            fs.mkdirSync(dotVendiaClientPath);
        }
        installedClientPath = vendiaMonorepoOverrides.installedClientPath;
    }
    else {
        // Create .vendia-client directory inside node_modules if it doesn't exist
        const nodeModulesPath = path.join(dotVendiaDirPath, '..', 'node_modules');
        if (!fs.existsSync(nodeModulesPath)) {
            throw new Error(`Could not find node_modules dir at ${nodeModulesPath} - make sure you've installed the @vendia/client package before running the generate command.`);
        }
        dotVendiaClientPath = path.join(nodeModulesPath, '.vendia-client');
        if (!fs.existsSync(dotVendiaClientPath)) {
            fs.mkdirSync(dotVendiaClientPath);
        }
        installedClientPath = path.join(dotVendiaDirPath, '..', 'node_modules', '@vendia', 'client');
        if (!fs.existsSync(installedClientPath)) {
            throw new Error(`Could not find @vendia/client at ${installedClientPath}`);
        }
    }
    // Generate SDK and write to .vendia-client
    const sdkString = yield generateTypescript({
        graphQlSchema,
        schemaJson,
        schemaNamespace,
    });
    const sdkPath = path.join(dotVendiaClientPath, 'generated.ts');
    fs.writeFile(sdkPath, sdkString, () => {
        debug('Codegen files generated at:', sdkPath);
        debugInfo.codegenFilesGeneratedAt = sdkPath;
    });
    // Copy src files to .vendia-client
    const installedClientSourcePath = path.join(installedClientPath, 'src');
    copyFolderSync(installedClientSourcePath, dotVendiaClientPath);
    // Entry file
    // Also, convert Windows path separators to Max/Linux due to bug in globby used in TSUP
    // https://github.com/egoist/tsup/blob/8230221e4ee689cf070e8e288f098f8484404d53/src/index.ts#L83
    // https://github.com/sindresorhus/globby/issues/179
    const indexFilePath = path.join(dotVendiaClientPath, 'index.ts').replace(/\\/g, '/');
    // Compile typescript to js/dts files - pass reference to tsconfig in @vendia/client
    //  as it won't find it automatically, and it's needed for d.ts generation
    console.log('Compiling TypeScript to js/d.ts files...');
    const tsconfigPath = path.join(installedClientPath, 'tsconfig.json');
    yield compileTs(indexFilePath, { outDir: dotVendiaClientPath, tsconfig: tsconfigPath, dts: true });
    // Module build
    const tsconfigModulePath = path.join(installedClientPath, 'tsconfig.module.json');
    yield compileTs(indexFilePath, {
        outDir: dotVendiaClientPath,
        tsconfig: tsconfigModulePath,
        format: ['esm'],
    });
    console.log('Vendia client generated successfully!');
});
function copyFolderSync(from, to) {
    if (!fs.existsSync(to)) {
        fs.mkdirSync(to);
    }
    fs.readdirSync(from).forEach((element) => {
        if (fs.lstatSync(path.join(from, element)).isFile()) {
            fs.copyFileSync(path.join(from, element), path.join(to, element));
        }
        else {
            copyFolderSync(path.join(from, element), path.join(to, element));
        }
    });
}
